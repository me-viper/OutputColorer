<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OutputColorer</name>
    </assembly>
    <members>
        <member name="T:OutputColorer.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OutputColorer.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OutputColorer.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:OutputColorer.OutputClassifier.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Classify debug output spans.
            </summary>
            <param name="span">The span of interest in this projection buffer.</param>
            <returns>The list of <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan"/> as contributed by the source buffers.</returns>
        </member>
        <member name="E:OutputColorer.OutputClassifier.ClassificationChanged">
            <summary>
            Ocurs when the classification of a span of text has changed.
            </summary>
            <remarks>
            This event does not need to be raised for newly-inserted text.
            However, it should be raised if any text other than that which was actually inserted has been reclassified.
            It should also be raised if the deletion of text causes the remaining
            text to be reclassified.</remarks>
        </member>
        <member name="T:OutputColorer.OutputClassifierProvider">
            <summary>
            Provides classifiers for Output window.
            </summary>
        </member>
        <member name="M:OutputColorer.OutputClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the classifier for specified text buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Classifier for specified text buffer.</returns>
        </member>
        <member name="M:OutputColorer.BuildOutputClassifier.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Classify the given spans, which, for diff files, classifies
            a line at a time.
            </summary>
            <param name="span">The span of interest in this projection buffer.</param>
            <returns>The list of <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan"/> as contributed by the source buffers.</returns>
        </member>
        <member name="E:OutputColorer.BuildOutputClassifier.ClassificationChanged">
            <summary>
            Ocurs when the classification of a span of text has changed.
            </summary>
            <remarks>
            This event does not need to be raised for newly-inserted text.
            However, it should be raised if any text other than that which was actually inserted has been reclassified.
            It should also be raised if the deletion of text causes the remaining
            text to be reclassified.</remarks>
        </member>
        <member name="T:Talk2Bits.OutputColorerInstaller.OutputColorerInstallerPackage">
             <summary>
             This is the class that implements the package exposed by this assembly.
            
             The minimum requirement for a class to be considered a valid package for Visual Studio
             is to implement the IVsPackage interface and register itself with the shell.
             This package uses the helper classes defined inside the Managed Package Framework (MPF)
             to do it: it derives from the Package class that provides the implementation of the 
             IVsPackage interface and uses the registration attributes defined in the framework to 
             register itself and its components with the shell.
             </summary>
        </member>
        <member name="M:Talk2Bits.OutputColorerInstaller.OutputColorerInstallerPackage.#ctor">
            <summary>
            Default constructor of the package.
            Inside this method you can place any initialization code that does not require 
            any Visual Studio service because at this point the package object is created but 
            not sited yet inside Visual Studio environment. The place to do all the other 
            initialization is the Initialize method.
            </summary>
        </member>
        <member name="M:Talk2Bits.OutputColorerInstaller.OutputColorerInstallerPackage.Initialize">
            <summary>
            Initialization of the package; this method is called right after the package is sited, so this is the place
            where you can put all the initilaization code that rely on services provided by VisualStudio.
            </summary>
        </member>
    </members>
</doc>
